[["Map",1,2,9,10,72,73],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.15.3","content-config-digest","ad6e423f1e36f4e0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://franklin.codes\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_assets\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true,\"allowedDomains\":[]},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,42,43],"01-watchlist",{"id":11,"data":13,"body":26,"filePath":27,"assetImports":28,"digest":30,"rendered":31,"legacyId":41},{"title":14,"description":15,"date":16,"image":17,"tags":18,"link":24,"repo":25},"Watchlist","A web app for keeping track of Movies and TV Shows you would like to watch. Discover, find information, watch trailers, and find out where you can watch them, all in one app.",["Date","2019-01-01T00:00:00.000Z"],"__ASTRO_IMAGE_./watchlist-phone.png",[19,20,21,22,23],"React","Redux","Node.js","Express","Firebase","https://watchlist-3399e.firebaseapp.com/","https://github.com/franklinfarahani/watchlist","A web app for keeping track of Movies and TV Shows you would like to watch.\nDiscover, find information, watch trailers, and find out where you can watch them, all in one app.","src/content/projects/01-watchlist/index.md",[29],"./watchlist-phone.png","0e0e13b1f215ad71",{"html":32,"metadata":33},"\u003Cp>A web app for keeping track of Movies and TV Shows you would like to watch.\nDiscover, find information, watch trailers, and find out where you can watch them, all in one app.\u003C/p>",{"headings":34,"localImagePaths":35,"remoteImagePaths":36,"frontmatter":37,"imagePaths":40},[],[],[],{"title":14,"description":15,"date":38,"tags":39,"repo":25,"link":24,"image":29},"2019-01-01",[19,20,21,22,23],[],"01-watchlist/index.md","02-franklin-codes",{"id":42,"data":44,"body":56,"filePath":57,"assetImports":58,"digest":60,"rendered":61,"legacyId":71},{"title":45,"description":46,"date":47,"image":48,"tags":49,"link":54,"repo":55},"Portfolio","My personal website where I display my past projects and blog about JS-related topics. Built using Astro, Tailwind, and MDX to be fast and future-proof.",["Date","2023-12-01T00:00:00.000Z"],"__ASTRO_IMAGE_./portfolio.png",[50,19,51,52,53],"Astro","TypeScript","Tailwind","MDX","https://www.franklin.codes/","https://github.com/franklinfarahani/franklin.codes","My personal website where I display my past projects and blog about JS-related topics.\nBuilt using Astro and modern web technologies to be fast and future-proof.","src/content/projects/02-franklin-codes/index.md",[59],"./portfolio.png","5f2d3680cf5e7510",{"html":62,"metadata":63},"\u003Cp>My personal website where I display my past projects and blog about JS-related topics.\nBuilt using Astro and modern web technologies to be fast and future-proof.\u003C/p>",{"headings":64,"localImagePaths":65,"remoteImagePaths":66,"frontmatter":67,"imagePaths":70},[],[],[],{"title":45,"description":46,"date":68,"tags":69,"repo":55,"link":54,"image":59},"2023-12-01",[50,19,51,52,53],[],"02-franklin-codes/index.md","blog",["Map",74,75,119,120,153,154],"creating-css-grid-layouts-the-easy-way",{"id":74,"data":76,"body":85,"filePath":86,"assetImports":87,"digest":90,"rendered":91,"legacyId":118},{"title":77,"description":78,"date":79,"cover":80,"tags":81},"Creating CSS Grid Layouts the Easy Way","Learning CSS Grid may be a daunting task to many developers. We discuss the minimum you need to know before you become a Grid believer (Hint: named grid areas!)",["Date","2019-06-29T00:00:00.000Z"],"__ASTRO_IMAGE_./css-grid-aha.jpg",[82,83,84],"CSS-grid","CSS","Styling","## Introduction\n\nCSS Grid is a (relatively) new, powerful, and versatile tool for creating modern layouts. It also has 18 new properties and therefore has a steep learning curve. Or does it?\n\nMy reason for writing this article was to demonstrate that not only this is not true, but that you can learn all you need to know to scaffold great UI with Grid, in less than 5 minutes.\n\nI should mention that the goal of this article is not to provide an exhaustive encyclopedic guide to CSS Grid. This is because there are already many resources available online (links at the end) that do this way better than I ever could. I'm hoping however, to help you get up and running with Grid and hopefully understand and appreciate what it can offer along the way.\n\nAlso, please note that it might be a good idea to use [Firefox Developer Edition](https://www.mozilla.org/en-US/firefox/developer/) when working with CSS Grid, mainly because it can help visualize you grid designs better than other browsers at the moment. This is however not a requirement by any means.\n\nLet's get started.\n\n## The Basics\n\nAs you might know, unlike Flex, CSS Grid works on a 2-dimensional system. With Flex, you specify whether you want your container's items to be arranged in a column or a row, and then you can modify properties that move them around that single axis. With Grid however, you are not restricted to just the column or the row and you able to arrange your items along either axis at the same time. \n\nGrid achieves this by allowing you to specify grid lines for a parent container and then letting you assign locations to its children by declaring the vertical and horizontal start and finish lines for them.\n\nSounds a bit complicated, doesn't it? Let's look at an example for the following design:\n\n![Simple Grid Layout](./css-grid-animation.gif)\n\n```css\n#article {\n  display: grid;\n  grid-template-columns: 150px 1fr;\n}\n\n#sidebar {\n  grid-column: 1 / 2;\n}\n\n#content {\n  grid-column: 2 / 3;\n}\n```\n\nNot too bad, right? But it can be much better. Let's say for the responsive phone view, you would like to stack `#sidebar` and `#content` on top of each other. One way to do it would be to write media queries for each element like so:\n\n```css {3, 4, 8, 12}\n@media (min-width: 320px) and (max-width: 480px) {\n  #article {\n    grid-template-columns: 1fr;\n    grid-template-rows: auto auto;\n  }\n\n  #sidebar {\n    grid-row: 1 / 2;\n  }\n\n  #content {\n    grid-row: 2 / 3;\n  }\n}\n```\n\nThis will certainly do the job but as you can see, with our current method we would have to modify multiple elements to create our desired effect on smaller screens. We are not taking advantage of one of Grid's most powerful features:\n\n## Named Areas\n\nLet's create the same layout, this time using `grid-template`:\n\n\n```css\n#article {\n  display: grid;\n  grid-template: \n    \"sidebar main\" auto / 150px 1fr;\n}\n\n#sidebar {\n  grid-area: sidebar;\n}\n\n#content {\n  grid-area: main;\n}\n```\n\nHere, we have assigned names to the areas we had in mind, given them a row height of `auto` and given them the same widths as before, all in one property. This means that now, we don't need to bother with using line numbers to choose the children's locations. Therefore, in order to create the same responsive layout as before, we could just change `#article` in our media query:\n\n```css {3-5}\n@media (min-width: 320px) and (max-width: 480px) {\n  #article {\n    grid-template: \n      \"sidebar\" auto \n      \"main   \" auto / 1fr;\n  }\n}\n```\n\nAs you can see, this makes it possible for you to visualize UI as you are writing CSS. This means in order to create any layout, you first need to plan it by drawing grid lines, and dividing it into areas that you can name later.\n\nIt's important to note that the areas you assign in the parent container need to create a complete rectangular shape, which means no **L-shaped** selections are allowed. If an area is not assigned to any element, you must put **dots** in its place. You can use as many dots as you want as long as they connect. Similarly, you can also use as many **spaces** you want in-between your elements if you need them to align correctly. Here's how that would look like:\n\n```css\n#card {\n  grid-template:\n    \"meta   .....\" auto\n    \"title  image\" 80px\n    \"tags   .....\" auto / 1fr 80px;\n  }\n}\n```\n\n## Conclusion\n\nThe key to creating great grid layouts is to first plan where each element goes in regards to the parent container. This can be achieved by drawing grid lines over your design and taking note of where each element goes. Then all that needs to be done is to use `grid-template` in the parent container to create the layout, and then for each child to be assigned to their respective area names using `grid-area`.\n\n#### Links to Other Resources\n\n* [A Complete Guide to Grid](https://css-tricks.com/snippets/css/complete-guide-grid/)\n* [A guide to learning CSS grid by @jonsuh](https://learncssgrid.com/)\n* [Grid Garden](https://cssgridgarden.com/)","src/content/blog/creating-css-grid-layouts-the-easy-way/index.md",[88,89],"./css-grid-animation.gif","./css-grid-aha.jpg","4c6ea9b9da5301da",{"html":92,"metadata":93},"\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\n\u003Cp>CSS Grid is a (relatively) new, powerful, and versatile tool for creating modern layouts. It also has 18 new properties and therefore has a steep learning curve. Or does it?\u003C/p>\n\u003Cp>My reason for writing this article was to demonstrate that not only this is not true, but that you can learn all you need to know to scaffold great UI with Grid, in less than 5 minutes.\u003C/p>\n\u003Cp>I should mention that the goal of this article is not to provide an exhaustive encyclopedic guide to CSS Grid. This is because there are already many resources available online (links at the end) that do this way better than I ever could. I’m hoping however, to help you get up and running with Grid and hopefully understand and appreciate what it can offer along the way.\u003C/p>\n\u003Cp>Also, please note that it might be a good idea to use \u003Ca href=\"https://www.mozilla.org/en-US/firefox/developer/\">Firefox Developer Edition\u003C/a> when working with CSS Grid, mainly because it can help visualize you grid designs better than other browsers at the moment. This is however not a requirement by any means.\u003C/p>\n\u003Cp>Let’s get started.\u003C/p>\n\u003Ch2 id=\"the-basics\">The Basics\u003C/h2>\n\u003Cp>As you might know, unlike Flex, CSS Grid works on a 2-dimensional system. With Flex, you specify whether you want your container’s items to be arranged in a column or a row, and then you can modify properties that move them around that single axis. With Grid however, you are not restricted to just the column or the row and you able to arrange your items along either axis at the same time.\u003C/p>\n\u003Cp>Grid achieves this by allowing you to specify grid lines for a parent container and then letting you assign locations to its children by declaring the vertical and horizontal start and finish lines for them.\u003C/p>\n\u003Cp>Sounds a bit complicated, doesn’t it? Let’s look at an example for the following design:\u003C/p>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./css-grid-animation.gif&#x22;,&#x22;alt&#x22;:&#x22;Simple Grid Layout&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#article\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">grid\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-template-columns\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#sidebar\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-column\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#content\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-column\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Not too bad, right? But it can be much better. Let’s say for the responsive phone view, you would like to stack \u003Ccode>#sidebar\u003C/code> and \u003Ccode>#content\u003C/code> on top of each other. One way to do it would be to write media queries for each element like so:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@media\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">min-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">320\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">and\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">480\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  #article\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-template-columns\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-template-rows\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">auto\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  #sidebar\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-row\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  #content\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-row\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will certainly do the job but as you can see, with our current method we would have to modify multiple elements to create our desired effect on smaller screens. We are not taking advantage of one of Grid’s most powerful features:\u003C/p>\n\u003Ch2 id=\"named-areas\">Named Areas\u003C/h2>\n\u003Cp>Let’s create the same layout, this time using \u003Ccode>grid-template\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#article\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">grid\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"sidebar main\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">150\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#sidebar\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: sidebar;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#content\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-area\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: main;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, we have assigned names to the areas we had in mind, given them a row height of \u003Ccode>auto\u003C/code> and given them the same widths as before, all in one property. This means that now, we don’t need to bother with using line numbers to choose the children’s locations. Therefore, in order to create the same responsive layout as before, we could just change \u003Ccode>#article\u003C/code> in our media query:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@media\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">min-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">320\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">and\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">480\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  #article\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    grid-template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"sidebar\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">      \"main   \"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, this makes it possible for you to visualize UI as you are writing CSS. This means in order to create any layout, you first need to plan it by drawing grid lines, and dividing it into areas that you can name later.\u003C/p>\n\u003Cp>It’s important to note that the areas you assign in the parent container need to create a complete rectangular shape, which means no \u003Cstrong>L-shaped\u003C/strong> selections are allowed. If an area is not assigned to any element, you must put \u003Cstrong>dots\u003C/strong> in its place. You can use as many dots as you want as long as they connect. Similarly, you can also use as many \u003Cstrong>spaces\u003C/strong> you want in-between your elements if you need them to align correctly. Here’s how that would look like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">#card\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  grid-template\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"meta   .....\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"title  image\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 80\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"tags   .....\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">fr\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 80\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>The key to creating great grid layouts is to first plan where each element goes in regards to the parent container. This can be achieved by drawing grid lines over your design and taking note of where each element goes. Then all that needs to be done is to use \u003Ccode>grid-template\u003C/code> in the parent container to create the layout, and then for each child to be assigned to their respective area names using \u003Ccode>grid-area\u003C/code>.\u003C/p>\n\u003Ch4 id=\"links-to-other-resources\">Links to Other Resources\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://learncssgrid.com/\">A guide to learning CSS grid by @jonsuh\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://cssgridgarden.com/\">Grid Garden\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":94,"localImagePaths":112,"remoteImagePaths":113,"frontmatter":114,"imagePaths":117},[95,99,102,105,108],{"depth":96,"slug":97,"text":98},2,"introduction","Introduction",{"depth":96,"slug":100,"text":101},"the-basics","The Basics",{"depth":96,"slug":103,"text":104},"named-areas","Named Areas",{"depth":96,"slug":106,"text":107},"conclusion","Conclusion",{"depth":109,"slug":110,"text":111},4,"links-to-other-resources","Links to Other Resources",[88],[],{"title":77,"date":115,"description":78,"tags":116,"cover":89},"2019-06-29",[82,83,84],[88],"creating-css-grid-layouts-the-easy-way/index.md","accessing-typing-and-destructuring-props-in-emotion",{"id":119,"data":121,"body":129,"filePath":130,"assetImports":131,"digest":133,"rendered":134,"legacyId":152},{"title":122,"description":123,"date":124,"cover":125,"tags":126},"Accessing, Typing, and Destructuring Props in Emotion","Dynamic component styling is an important benefit of using CSS-in-JS libraries. I go over patterns for using component props, destructuring them (or maybe not!), and giving them types using TypeScript.",["Date","2019-06-22T00:00:00.000Z"],"__ASTRO_IMAGE_./emotion-plus-ts.jpg",[127,51,19,128],"Emotion","styled-components","# Introduction\n\nTo understand where the props (or function arguments) of Emotion components \ngo we must first understand why the syntax looks the way it does. Let's look\nat an example:\n\n```js\nconst MyComponent = styled.div`\n  background-color: red;\n`;\n```\n\nThis notation is called a \n[Tagged Template Literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates)\nand it is actually a feature of ES6. Here's what it looks like in its barest \nform:\n\n```js\nconst myFunction = (...arg) => console.log(...arg);\n\nmyFunction`Hello World!`; // [\"Hello World\"]\n\n// equivalent to:\nmyFunction(['Hello World']);\n```\n\nNow, Let's say we slightly modify `myFunction` to add an interpolation in there.\nThe equivalent function call will most likely give you a hint as to how Emotion\nworks under the hood.\n\n```js\nconst name = 'Franklin';\n\nmyFunction`Hello ${name}!`; // [\"Hello \", \"!\"] \"Franklin\"\n\n// equivalent to:\nmyFunction(['Hello ', '!'], name);\n```\n\nAs you can see, the string is broken up and placed into an array while our `name`\nvariable is passed as an argument. This is essentially how Emotion and other similar \nlibraries are able to offer the syntax they have. It is important to note that in the\nexample above, we passed a variable to our function as an argument, but using template\nliterals we are also able to pass **functions** as arguments.\n\n## Accessing Props and Destructuring\n\nLet's go back to our original component. In the same way that we were passing\narguments to `myFunction`, we can pass functions to our component as well. \nEmotion will then in turn process, resolve, and turn it into styles.\n\nHere's what that looks like:\n\n```js\nconst MyComponent = styled.div`\n  background-color: ${props => props.color};\n`;\n\n// Usage:\n\u003CMyComponent color=\"red\" />\n\n```\n\nAs you might have noticed, in larger and more complex components it might become\ntedious to include `${props => props.someProp}` every time we want to style some\nproperty dynamically. Considering we're only dealing with functions, it is possible\nto use the following pattern to somewhat destructure our props:\n\n```js\nconst MyComponent = styled.div`\n  ${({ color }) => `\n    background-color: ${color};\n  `};\n`;\n```\n\nHowever, in my opinion this is less readable than the original syntax considering,\nas you can see, we have entered the classic bracket hell. Still, it might make sense\nto use this pattern when necessary.\n\n## TypeScript Typing\n\nIt might be confusing to figure out how the types need to be included in Emotion\ncomponents, but this can be achieved using the syntax below:\n\n```ts\ntype MyComponentProps = {\n  color: string\n}\n\nconst MyComponent = styled.div\u003CMyComponentProps>`\n  background-color: ${props => props.color};\n`;\n\n```","src/content/blog/accessing-typing-and-destructuring-props-in-emotion/index.md",[132],"./emotion-plus-ts.jpg","c966d42d9ff21c8b",{"html":135,"metadata":136},"\u003Ch1 id=\"introduction\">Introduction\u003C/h1>\n\u003Cp>To understand where the props (or function arguments) of Emotion components\ngo we must first understand why the syntax looks the way it does. Let’s look\nat an example:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> styled.\u003C/span>\u003Cspan style=\"color:#B392F0\">div\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  background-color: red;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This notation is called a\n\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\">Tagged Template Literal\u003C/a>\nand it is actually a feature of ES6. Here’s what it looks like in its barest\nform:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> myFunction\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#FFAB70\">arg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">arg);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">myFunction\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Hello World!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// [\"Hello World\"]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// equivalent to:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">myFunction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello World'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now, Let’s say we slightly modify \u003Ccode>myFunction\u003C/code> to add an interpolation in there.\nThe equivalent function call will most likely give you a hint as to how Emotion\nworks under the hood.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'Franklin'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">myFunction\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`Hello ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">}!`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// [\"Hello \", \"!\"] \"Franklin\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// equivalent to:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">myFunction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hello '\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">], name);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, the string is broken up and placed into an array while our \u003Ccode>name\u003C/code>\nvariable is passed as an argument. This is essentially how Emotion and other similar\nlibraries are able to offer the syntax they have. It is important to note that in the\nexample above, we passed a variable to our function as an argument, but using template\nliterals we are also able to pass \u003Cstrong>functions\u003C/strong> as arguments.\u003C/p>\n\u003Ch2 id=\"accessing-props-and-destructuring\">Accessing Props and Destructuring\u003C/h2>\n\u003Cp>Let’s go back to our original component. In the same way that we were passing\narguments to \u003Ccode>myFunction\u003C/code>, we can pass functions to our component as well.\nEmotion will then in turn process, resolve, and turn it into styles.\u003C/p>\n\u003Cp>Here’s what that looks like:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> styled.\u003C/span>\u003Cspan style=\"color:#B392F0\">div\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  background-color: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">props\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> props\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">color\u003C/span>\u003Cspan style=\"color:#9ECBFF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Usage:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">MyComponent\u003C/span>\u003Cspan style=\"color:#B392F0\"> color\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"red\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you might have noticed, in larger and more complex components it might become\ntedious to include \u003Ccode>${props => props.someProp}\u003C/code> every time we want to style some\nproperty dynamically. Considering we’re only dealing with functions, it is possible\nto use the following pattern to somewhat destructure our props:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> styled.\u003C/span>\u003Cspan style=\"color:#B392F0\">div\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  ${\u003C/span>\u003Cspan style=\"color:#9ECBFF\">({ \u003C/span>\u003Cspan style=\"color:#79B8FF\">color\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    background-color: ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">color\u003C/span>\u003Cspan style=\"color:#9ECBFF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  `};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>However, in my opinion this is less readable than the original syntax considering,\nas you can see, we have entered the classic bracket hell. Still, it might make sense\nto use this pattern when necessary.\u003C/p>\n\u003Ch2 id=\"typescript-typing\">TypeScript Typing\u003C/h2>\n\u003Cp>It might be confusing to figure out how the types need to be included in Emotion\ncomponents, but this can be achieved using the syntax below:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">type\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyComponentProps\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  color\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> styled.\u003C/span>\u003Cspan style=\"color:#B392F0\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#B392F0\">MyComponentProps\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">  background-color: ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">props\u003C/span>\u003Cspan style=\"color:#F97583\"> =>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> props\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">color\u003C/span>\u003Cspan style=\"color:#9ECBFF\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>",{"headings":137,"localImagePaths":146,"remoteImagePaths":147,"frontmatter":148,"imagePaths":151},[138,140,143],{"depth":139,"slug":97,"text":98},1,{"depth":96,"slug":141,"text":142},"accessing-props-and-destructuring","Accessing Props and Destructuring",{"depth":96,"slug":144,"text":145},"typescript-typing","TypeScript Typing",[],[],{"title":122,"date":149,"description":123,"tags":150,"cover":132},"2019-06-22",[127,51,19,128],[],"accessing-typing-and-destructuring-props-in-emotion/index.md","understanding-the-useeffect-hook-mindset",{"id":153,"data":155,"body":162,"filePath":163,"assetImports":164,"digest":166,"rendered":167,"legacyId":185},{"title":156,"description":157,"date":158,"cover":159,"tags":160},"Understanding the useEffect Hook Mindset","The trick to understanding useEffect is to figure out what your side effect should be \"synced\" with, rather than \"when\" it is happening.",["Date","2019-07-06T00:00:00.000Z"],"__ASTRO_IMAGE_./useeffect-hook.jpg",[161,19],"Hooks","## Introduction\n\nReact Hooks feel like magic to React users who are used to the classic lifecycle methods. They provide some niceties that are really appreciated, such as allowing you to share and reuse complex logic, making writing components more intuitive, and shortening the overall amount of code you need to write to achieve similar effects. However, just like the lifecycle methods [of old!], hooks have their own intricacies and gotchas that need to be understood. Here I discuss the `useEffect` hook and try to explain it in a way that can help you navigate the general challenges you might face.\n\n## The syntax\n\n```ts\nuseEffect(effect, dependencies)\n// accepts an effect and an optional dependency list\n```\n\nThe `useEffect` hook's purpose is to deal with all of the side effects of your React component. In React terms, this refers to any changes that need to happen **besides** the general return value presentation of the component. Some examples of side effects are network calls, logging, or manually changing the DOM.\n\nIt is also the equivalent of the old lifecycle hooks `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` combined.\n\nAs you might know, sharing similar logic between lifecycle methods is a very common occurrence in the React component ecosystem. Let's take a look at an example taken from the \n[official docs](https://reactjs.org/docs/hooks-effect.html#example-using-classes).\n\n```js {9-15}\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      \u003Cdiv>\n        \u003Cp>You clicked {this.state.count} times\u003C/p>\n        \u003Cbutton onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        \u003C/button>\n      \u003C/div>\n    );\n  }\n}\n```\n\nThis is practically the same code, because in this particular case we don't care about **when** the effect should occur, but rather that it occurs for *every* render of our component.\n\nLet's look at the same component, this time using `useEffect`:\n\n```js {1, 6-8}\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    \u003Cdiv>\n      \u003Cp>You clicked {count} times\u003C/p>\n      \u003Cbutton onClick={() => setCount(count + 1)}>\n        Click me\n      \u003C/button>\n    \u003C/div>\n  );\n}\n```\n\nHere `useEffect` is doing precisely what we intended in the first place, which is doing *something* after every render **including the first one**.\n\n## The Dependency List\n\nWhat if we wanted to run the effect exactly once, similar to `componentDidMount`? Let's say we have a fade-in animation for a component and we only want the animation to play when the component first mounts. What if we wanted it to play every time the component comes into view? How do we go about doing that?\n\nThat's when the second argument of `useEffect` comes in. The **dependency list** tells `useEffect` what changes or triggers we want to attach our effect to. Let's look at our second case, meaning every time the components comes into view:\n\n```js {6}\nuseEffect(() => {\n  // assuming 'isInView' is the state variable \n  // that denotes whether the component is in view\n  // ...\n  // fadeIn() effect\n}, [isInView])\n```\n\nThis is telling `useEffect` to play our effect after every re-render that involves `isInView` updating. We can achieve our first case goal (which is playing the animation only once after the first render), by leaving the array empty. This indicates that the effect should not be attached to any changes.\n\n```js {6}\nuseEffect(() => {\n  // assuming 'isInView' is the state variable \n  // that denotes whether the component is in view\n  // ...\n  // fadeIn() effect\n}, [])\n```\n\n## Conclusion\n\nThe main thing to understand with `useEffect` is that it requires a different mindset to the lifecycle method. Previously, side effects were handled by picking the right lifecycle method that revolved around timing. With `useEffect`, we think about side effects in terms of synchronization to state variables. A great way to neatly summarize this idea comes to you via a tweet by [@ryanflorence](https://twitter.com/ryanflorence):\n\nhttps://twitter.com/ryanflorence/status/1125041041063665666\n\nThank you for taking the time to read! Let me know if you have any questions.","src/content/blog/understanding-the-useeffect-hook-mindset/index.md",[165],"./useeffect-hook.jpg","d88bb7af225a2002",{"html":168,"metadata":169},"\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\n\u003Cp>React Hooks feel like magic to React users who are used to the classic lifecycle methods. They provide some niceties that are really appreciated, such as allowing you to share and reuse complex logic, making writing components more intuitive, and shortening the overall amount of code you need to write to achieve similar effects. However, just like the lifecycle methods [of old!], hooks have their own intricacies and gotchas that need to be understood. Here I discuss the \u003Ccode>useEffect\u003C/code> hook and try to explain it in a way that can help you navigate the general challenges you might face.\u003C/p>\n\u003Ch2 id=\"the-syntax\">The syntax\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(effect, dependencies)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// accepts an effect and an optional dependency list\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>useEffect\u003C/code> hook’s purpose is to deal with all of the side effects of your React component. In React terms, this refers to any changes that need to happen \u003Cstrong>besides\u003C/strong> the general return value presentation of the component. Some examples of side effects are network calls, logging, or manually changing the DOM.\u003C/p>\n\u003Cp>It is also the equivalent of the old lifecycle hooks \u003Ccode>componentDidMount\u003C/code>, \u003Ccode>componentDidUpdate\u003C/code>, and \u003Ccode>componentWillUnmount\u003C/code> combined.\u003C/p>\n\u003Cp>As you might know, sharing similar logic between lifecycle methods is a very common occurrence in the React component ecosystem. Let’s take a look at an example taken from the\n\u003Ca href=\"https://reactjs.org/docs/hooks-effect.html#example-using-classes\">official docs\u003C/a>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Example\u003C/span>\u003Cspan style=\"color:#F97583\"> extends\u003C/span>\u003Cspan style=\"color:#B392F0\"> React\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">Component\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    super\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(props);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  componentDidMount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    document.title \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `You clicked ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">count\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} times`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  componentDidUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    document.title \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `You clicked ${\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">state\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\">count\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} times`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  render\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>You clicked {\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state.count} times&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">setState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({ count: \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.state.count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> })}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          Click me\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is practically the same code, because in this particular case we don’t care about \u003Cstrong>when\u003C/strong> the effect should occur, but rather that it occurs for \u003Cem>every\u003C/em> render of our component.\u003C/p>\n\u003Cp>Let’s look at the same component, this time using \u003Ccode>useEffect\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> React, { useState, useEffect } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Example\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    document.title \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> `You clicked ${\u003C/span>\u003Cspan style=\"color:#E1E4E8\">count\u003C/span>\u003Cspan style=\"color:#9ECBFF\">} times`\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>You clicked {count} times&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        Click me\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here \u003Ccode>useEffect\u003C/code> is doing precisely what we intended in the first place, which is doing \u003Cem>something\u003C/em> after every render \u003Cstrong>including the first one\u003C/strong>.\u003C/p>\n\u003Ch2 id=\"the-dependency-list\">The Dependency List\u003C/h2>\n\u003Cp>What if we wanted to run the effect exactly once, similar to \u003Ccode>componentDidMount\u003C/code>? Let’s say we have a fade-in animation for a component and we only want the animation to play when the component first mounts. What if we wanted it to play every time the component comes into view? How do we go about doing that?\u003C/p>\n\u003Cp>That’s when the second argument of \u003Ccode>useEffect\u003C/code> comes in. The \u003Cstrong>dependency list\u003C/strong> tells \u003Ccode>useEffect\u003C/code> what changes or triggers we want to attach our effect to. Let’s look at our second case, meaning every time the components comes into view:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // assuming 'isInView' is the state variable \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // that denotes whether the component is in view\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // fadeIn() effect\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, [isInView])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is telling \u003Ccode>useEffect\u003C/code> to play our effect after every re-render that involves \u003Ccode>isInView\u003C/code> updating. We can achieve our first case goal (which is playing the animation only once after the first render), by leaving the array empty. This indicates that the effect should not be attached to any changes.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // assuming 'isInView' is the state variable \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // that denotes whether the component is in view\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // fadeIn() effect\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}, [])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>The main thing to understand with \u003Ccode>useEffect\u003C/code> is that it requires a different mindset to the lifecycle method. Previously, side effects were handled by picking the right lifecycle method that revolved around timing. With \u003Ccode>useEffect\u003C/code>, we think about side effects in terms of synchronization to state variables. A great way to neatly summarize this idea comes to you via a tweet by \u003Ca href=\"https://twitter.com/ryanflorence\">@ryanflorence\u003C/a>:\u003C/p>\n\u003Cp>\u003Ca href=\"https://twitter.com/ryanflorence/status/1125041041063665666\">https://twitter.com/ryanflorence/status/1125041041063665666\u003C/a>\u003C/p>\n\u003Cp>Thank you for taking the time to read! Let me know if you have any questions.\u003C/p>",{"headings":170,"localImagePaths":179,"remoteImagePaths":180,"frontmatter":181,"imagePaths":184},[171,172,175,178],{"depth":96,"slug":97,"text":98},{"depth":96,"slug":173,"text":174},"the-syntax","The syntax",{"depth":96,"slug":176,"text":177},"the-dependency-list","The Dependency List",{"depth":96,"slug":106,"text":107},[],[],{"title":156,"date":182,"description":157,"tags":183,"cover":165},"2019-07-06",[161,19],[],"understanding-the-useeffect-hook-mindset/index.md"]