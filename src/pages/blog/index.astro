---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Tag from '../../components/ui/Tag.astro';
import Search from '../../components/ui/Search';

// Get all blog posts, sorted by date
const posts = await getCollection('blog', ({ data }) => {
  return !data.draft;
}).then(posts =>
  posts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
);

// Get unique tags
const tags = [...new Set(posts.flatMap(post => post.data.tags || []))].sort();
---

<Layout title="Blog - Franklin Farahani">
  <main class="max-w-[1000px] mx-auto py-20">
    <header class="mb-16">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-4xl sm:text-5xl font-bold">Blog</h1>
        <a href="/rss.xml" class="text-grey hover:text-yellow transition-colors" title="RSS Feed">
          <svg class="w-6 h-6" viewBox="0 0 24 24" fill="currentColor">
            <path d="M6.503 20.752c0 1.794-1.456 3.248-3.251 3.248-1.796 0-3.252-1.454-3.252-3.248 0-1.794 1.456-3.248 3.252-3.248 1.795.001 3.251 1.454 3.251 3.248zm-6.503-12.572v4.811c6.05.062 10.96 4.966 11.022 11.009h4.817c-.062-8.71-7.118-15.758-15.839-15.82zm0-3.368c10.58.046 19.152 8.594 19.183 19.188h4.817c-.03-13.231-10.755-23.954-24-24v4.812z"/>
          </svg>
        </a>
      </div>

      <div class="mb-8">
        <Search client:load posts={posts} />
      </div>

      {/* Tags filter */}
      <div class="flex flex-wrap items-center gap-2" id="tag-filters">
        <button
          class="px-3 py-1 rounded-full text-sm transition-colors bg-yellow text-black tag-filter active"
          data-tag=""
        >
          All
        </button>
        {tags.map(tagName => (
          <button
            class="px-3 py-1 rounded-full text-sm transition-colors bg-lighter-grey dark:bg-darkest-grey hover:bg-yellow hover:text-black tag-filter"
            data-tag={tagName}
          >
            {tagName}
          </button>
        ))}
      </div>
    </header>

    <div class="grid gap-8" id="blog-posts">
      {posts.map(post => (
        <article class="group blog-post" data-tags={post.data.tags?.join(',') || ''}>
          <a href={`/blog/${post.slug}`} class="no-underline">
            <div class="bg-white dark:bg-almost-black rounded-lg shadow-md p-8 transition-transform hover:-translate-y-1">
              <h2 class="text-2xl font-semibold mb-2 text-almost-black dark:text-white">
                {post.data.title}
              </h2>
              {post.data.description && (
                <p class="text-dark-grey dark:text-light-grey mb-4">
                  {post.data.description}
                </p>
              )}
              <div class="flex flex-wrap items-center gap-x-4 gap-y-2 mb-4">
                <div class="flex items-center text-sm text-grey dark:text-darker-grey">
                  <time datetime={post.data.date.toISOString()}>
                    {post.data.date.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  {post.data.readingTime && (
                    <>
                      <span class="mx-2">â€¢</span>
                      <span>{post.data.readingTime} min read</span>
                    </>
                  )}
                </div>
              </div>
              {post.data.tags && (
                <div class="flex flex-wrap">
                  {post.data.tags.map(tag => (
                    <Tag>{tag}</Tag>
                  ))}
                </div>
              )}
            </div>
          </a>
        </article>
      ))}
    </div>

    <div class="text-center py-20 hidden" id="no-posts">
      <p class="text-xl text-grey dark:text-darker-grey mb-8">
        No posts found with the selected tag.
      </p>
      <button
        class="inline-flex items-center px-6 py-3 text-black dark:text-white bg-gradient-to-r from-yellow to-orange rounded-full transform hover:-translate-y-0.5 transition-transform duration-200"
        id="show-all-posts"
      >
        View All Posts
      </button>
    </div>
  </main>

  <script>
    // Blog tag filtering functionality
    function initBlogFiltering() {
      const tagFilters = document.querySelectorAll('.tag-filter');
      const blogPosts = document.querySelectorAll('.blog-post');
      const noPosts = document.getElementById('no-posts');
      const showAllButton = document.getElementById('show-all-posts');

      if (!tagFilters.length || !blogPosts.length) {
        console.log('Blog filtering elements not found');
        return;
      }

      function filterPosts(selectedTag) {
        console.log('Filtering by tag:', selectedTag);
        let visibleCount = 0;

        blogPosts.forEach(post => {
          const postTags = post.getAttribute('data-tags');
          console.log('Post tags:', postTags, 'Selected:', selectedTag);

          let shouldShow = false;
          if (selectedTag === '' || selectedTag === null) {
            shouldShow = true;
          } else if (postTags) {
            const tagsArray = postTags.split(',').map(tag => tag.trim());
            shouldShow = tagsArray.includes(selectedTag);
          }

          if (shouldShow) {
            post.style.display = 'block';
            visibleCount++;
          } else {
            post.style.display = 'none';
          }
        });

        console.log('Visible posts:', visibleCount);

        // Show/hide no posts message
        if (visibleCount === 0 && selectedTag !== '' && selectedTag !== null) {
          noPosts?.classList.remove('hidden');
        } else {
          noPosts?.classList.add('hidden');
        }
      }

      // Add click handlers to tag filters
      tagFilters.forEach(filter => {
        filter.addEventListener('click', function(e) {
          e.preventDefault();
          const selectedTag = this.getAttribute('data-tag');
          console.log('Tag clicked:', selectedTag);

          // Update active state
          tagFilters.forEach(f => {
            f.classList.remove('active', 'bg-yellow', 'text-black');
            f.classList.add('bg-lighter-grey');
            f.classList.add('dark:bg-darkest-grey');
          });

          this.classList.add('active', 'bg-yellow', 'text-black');
          this.classList.remove('bg-lighter-grey', 'dark:bg-darkest-grey');

          // Filter posts
          filterPosts(selectedTag);
        });
      });

      // Show all posts button
      showAllButton?.addEventListener('click', function() {
        const allButton = document.querySelector('[data-tag=""]');
        allButton?.click();
      });

      console.log('Blog filtering initialized');
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initBlogFiltering);
    } else {
      initBlogFiltering();
    }
  </script>
</Layout>
